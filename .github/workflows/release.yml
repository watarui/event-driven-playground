name: Release

on:
  push:
    tags:
      - 'v*'

env:
  ELIXIR_VERSION: "1.18.1"
  OTP_VERSION: "27.2"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Install dependencies
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get

      - name: Build release
        run: |
          MIX_ENV=prod mix release

      - name: Generate changelog
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ github.ref_name }}

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: false
          makeLatest: true
          name: ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changes }}
          token: ${{ github.token }}

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push release images
        run: |
          for service in client_service command_service query_service; do
            docker build -f apps/${service}/Dockerfile \
              -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:${{ github.ref_name }} \
              -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:latest \
              --build-arg VERSION=${{ github.ref_name }} \
              .
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:${{ github.ref_name }}
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:latest
          done

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: release
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update production manifests
        run: |
          for service in client_service command_service query_service; do
            IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:${{ github.ref_name }}"
            sed -i "s|image: .*${service}:.*|image: ${IMAGE_TAG}|g" k8s/overlays/production/kustomization.yaml
          done

      - name: Commit production updates
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add k8s/overlays/production/
          git commit -m "Deploy release ${{ github.ref_name }} to production"
          git push

      - name: Trigger ArgoCD production sync
        run: |
          curl -X POST https://argocd.example.com/api/v1/applications/elixir-cqrs-production/sync \
            -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
            -H "Content-Type: application/json"