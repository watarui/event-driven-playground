name: Deploy to Production

# main ブランチへのプッシュまたはマージで自動デプロイ
on:
  push:
    branches:
      - main
  workflow_dispatch: # 手動実行も可能

env:
  PROJECT_ID: event-driven-playground-prod
  REGION: asia-northeast1
  ARTIFACT_REGISTRY: asia-northeast1-docker.pkg.dev/event-driven-playground-prod/event-driven-playground

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # Workload Identity Federation に必要

    steps:
      # リポジトリのチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # Google Cloud 認証（Workload Identity Federation を使用）
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      # Cloud SDK のセットアップ
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Docker 認証設定
      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${REGION}-docker.pkg.dev

      # ビルドとプッシュ（Cloud Build を使用）
      - name: Build and Push Images
        run: |
          # Cloud Build を実行（ログのストリーミングエラーは無視）
          gcloud builds submit \
            --config=cloudbuild-optimized.yaml \
            --substitutions=SHORT_SHA=${GITHUB_SHA::7} \
            --project=${PROJECT_ID} || true
          
          # ビルドの完了を待つ
          BUILD_ID=$(gcloud builds list --limit=1 --format="value(id)" --project=${PROJECT_ID})
          echo "Waiting for build ${BUILD_ID} to complete..."
          
          # ビルドステータスを確認
          while true; do
            STATUS=$(gcloud builds describe ${BUILD_ID} --project=${PROJECT_ID} --format="value(status)")
            if [[ "${STATUS}" == "SUCCESS" ]]; then
              echo "✅ Build completed successfully"
              break
            elif [[ "${STATUS}" == "FAILURE" || "${STATUS}" == "TIMEOUT" || "${STATUS}" == "CANCELLED" ]]; then
              echo "❌ Build failed with status: ${STATUS}"
              exit 1
            else
              echo "⏳ Build status: ${STATUS}. Waiting..."
              sleep 10
            fi
          done
      
      # マイグレーションイメージのビルド
      - name: Build Migration Image
        run: |
          echo "🔨 Building migration image..."
          gcloud builds submit \
            --config=cloudbuild-migrate.yaml \
            --project=${PROJECT_ID} || true
          
          # ビルドの完了を待つ
          sleep 5
          BUILD_ID=$(gcloud builds list --limit=1 --format="value(id)" --project=${PROJECT_ID})
          echo "Waiting for migration build ${BUILD_ID} to complete..."
          
          # ビルドステータスを確認
          while true; do
            STATUS=$(gcloud builds describe ${BUILD_ID} --project=${PROJECT_ID} --format="value(status)")
            if [[ "${STATUS}" == "SUCCESS" ]]; then
              echo "✅ Migration build completed successfully"
              break
            elif [[ "${STATUS}" == "FAILURE" || "${STATUS}" == "TIMEOUT" || "${STATUS}" == "CANCELLED" ]]; then
              echo "❌ Migration build failed with status: ${STATUS}"
              exit 1
            else
              echo "⏳ Build status: ${STATUS}. Waiting..."
              sleep 10
            fi
          done

      # マイグレーションの実行
      - name: Run Database Migrations
        run: |
          echo "🗄️ Running database migrations..."
          # Job のリソースを一時的に増やす
          gcloud run jobs update database-migrate \
            --cpu=2 \
            --memory=2Gi \
            --max-retries=1 \
            --parallelism=1 \
            --task-timeout=600 \
            --region=${REGION} \
            --project=${PROJECT_ID}
          
          # マイグレーションを実行
          gcloud run jobs execute database-migrate \
            --region=${REGION} \
            --project=${PROJECT_ID} \
            --wait
          echo "✅ Migrations completed"

      # サービスのデプロイ
      - name: Deploy Services
        run: |
          # イメージタグ
          IMAGE_TAG=${GITHUB_SHA::7}
          
          # Command Service
          gcloud run deploy command-service \
            --image=${ARTIFACT_REGISTRY}/command-service:${IMAGE_TAG} \
            --region=${REGION} \
            --project=${PROJECT_ID} \
            --platform=managed \
            --no-traffic
          
          # Query Service
          gcloud run deploy query-service \
            --image=${ARTIFACT_REGISTRY}/query-service:${IMAGE_TAG} \
            --region=${REGION} \
            --project=${PROJECT_ID} \
            --platform=managed \
            --no-traffic
          
          # Client Service
          gcloud run deploy client-service \
            --image=${ARTIFACT_REGISTRY}/client-service:${IMAGE_TAG} \
            --region=${REGION} \
            --project=${PROJECT_ID} \
            --platform=managed \
            --no-traffic

      # ヘルスチェック
      - name: Health Check New Versions
        run: |
          echo "🏥 Checking health of new deployments..."
          
          # 各サービスの新しいリビジョンの URL を取得
          SERVICES=("command-service" "query-service" "client-service")
          FAILED_SERVICES=()
          
          for SERVICE in "${SERVICES[@]}"; do
            echo "Checking ${SERVICE}..."
            
            # サービスの URL を取得
            SERVICE_URL=$(gcloud run services describe ${SERVICE} \
              --region=${REGION} \
              --project=${PROJECT_ID} \
              --format="value(status.url)")
            
            # ヘルスチェック（リトライ付き）
            HEALTHY=false
            for i in {1..5}; do
              # 公開エンドポイントにアクセス（認証なし）
              if curl -f -s -o /dev/null -w "%{http_code}" "${SERVICE_URL}/health/ready" | grep -q "200"; then
                echo "✅ ${SERVICE} is healthy"
                HEALTHY=true
                break
              else
                echo "⏳ Waiting for ${SERVICE} to be ready (attempt $i/5)..."
                if [ $i -lt 5 ]; then
                  sleep 10
                fi
              fi
            done
            
            if [ "$HEALTHY" = false ]; then
              echo "❌ ${SERVICE} health check failed after 5 attempts"
              FAILED_SERVICES+=("${SERVICE}")
            fi
          done
          
          # 失敗したサービスがある場合はエラー
          if [ ${#FAILED_SERVICES[@]} -gt 0 ]; then
            echo "❌ Health check failed for: ${FAILED_SERVICES[*]}"
            exit 1
          fi
          
          echo "✅ All services are healthy"

      # トラフィックの切り替え
      - name: Switch Traffic
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          
          # 全サービスのトラフィックを新バージョンに切り替え
          gcloud run services update-traffic command-service \
            --to-latest \
            --region=${REGION} \
            --project=${PROJECT_ID}
          
          gcloud run services update-traffic query-service \
            --to-latest \
            --region=${REGION} \
            --project=${PROJECT_ID}
          
          gcloud run services update-traffic client-service \
            --to-latest \
            --region=${REGION} \
            --project=${PROJECT_ID}
          
          echo "✅ Traffic switched to new version"

      # デプロイ結果の通知
      - name: Deployment Summary
        if: always()
        run: |
          echo "🚀 Deployment Summary"
          echo "==================="
          echo "Git SHA: ${GITHUB_SHA}"
          echo "Image Tag: ${GITHUB_SHA::7}"
          echo "Region: ${REGION}"
          echo "Project: ${PROJECT_ID}"
          
          # サービス URL の表示
          echo ""
          echo "Service URLs:"
          gcloud run services list \
            --platform=managed \
            --region=${REGION} \
            --project=${PROJECT_ID} \
            --format="table(SERVICE:label='Service',URL:label='URL')"

