name: Deploy to Production

# main ブランチへのプッシュまたはマージで自動デプロイ
on:
  push:
    branches:
      - main
  workflow_dispatch: # 手動実行も可能

env:
  PROJECT_ID: event-driven-playground-prod
  REGION: asia-northeast1
  ARTIFACT_REGISTRY: asia-northeast1-docker.pkg.dev/event-driven-playground-prod/event-driven-playground

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # Workload Identity Federation に必要

    steps:
      # リポジトリのチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # Google Cloud 認証（Workload Identity Federation を使用）
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      # Cloud SDK のセットアップ
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Docker 認証設定
      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${REGION}-docker.pkg.dev

      # ビルドとプッシュ（サービスイメージのみ）
      - name: Build and Push Service Images
        run: |
          echo "🔨 Building service images (excluding migration)..."
          # Cloud Build を実行（Firestore版のビルド設定を使用）
          # --no-source オプションを使用してバケットアクセスを回避
          gcloud builds submit \
            --config=build/cloudbuild/firestore-simple.yaml \
            --substitutions=SHORT_SHA=${GITHUB_SHA::7},_PROJECT_ID=${PROJECT_ID} \
            --project=${PROJECT_ID} \
            .
          
          # ビルドの完了を待つ（Cloud Build submit は同期的に実行されるのでこのステップは不要）
          echo "✅ Build submitted successfully"
          
          # ビルドされたイメージの確認
          echo "🔍 Verifying built images..."
          IMAGE_TAG=${GITHUB_SHA::7}
          
          # 各サービスのイメージが存在するか確認
          for SERVICE in command-service query-service client-service; do
            IMAGE_URI="${ARTIFACT_REGISTRY}/${SERVICE}:${IMAGE_TAG}"
            echo "Checking image: ${IMAGE_URI}"
            
            if gcloud container images describe ${IMAGE_URI} --project=${PROJECT_ID} >/dev/null 2>&1; then
              echo "✅ ${SERVICE} image found"
            else
              echo "❌ ${SERVICE} image not found at ${IMAGE_URI}"
              echo "Listing available tags for ${SERVICE}:"
              gcloud container images list-tags ${ARTIFACT_REGISTRY}/${SERVICE} --limit=5 --project=${PROJECT_ID}
              exit 1
            fi
          done
      

      # マイグレーションは別ワークフローで実行
      # - name: Run Database Migrations
      #   マイグレーションは .github/workflows/run-migration.yml で手動実行
      #   GitHub Actions タブから "Run Database Migration" ワークフローを選択して実行
      #   
      #   実行方法:
      #   1. GitHub リポジトリの "Actions" タブを開く
      #   2. 左側のワークフロー一覧から "Run Database Migration" を選択
      #   3. "Run workflow" ボタンをクリック
      #   4. confirm フィールドに "migrate" と入力
      #   5. migration_type を選択（ecto または workaround）
      #   6. "Run workflow" をクリックして実行

      # サービスのデプロイ（並列実行）
      - name: Deploy Services in Parallel
        run: |
          # イメージタグ
          IMAGE_TAG=${GITHUB_SHA::7}
          REVISION_TAG="sha-${IMAGE_TAG}"
          
          echo "🚀 Deploying all services in parallel..."
          
          # 各サービスをバックグラウンドでデプロイ
          gcloud run deploy command-service \
            --image=${ARTIFACT_REGISTRY}/command-service:${IMAGE_TAG} \
            --region=${REGION} \
            --project=${PROJECT_ID} \
            --platform=managed \
            --tag=${REVISION_TAG} \
            --no-traffic \
            --update-env-vars=DATABASE_ADAPTER=firestore,FIRESTORE_PROJECT_ID=${PROJECT_ID} &
          PID_COMMAND=$!
          
          gcloud run deploy query-service \
            --image=${ARTIFACT_REGISTRY}/query-service:${IMAGE_TAG} \
            --region=${REGION} \
            --project=${PROJECT_ID} \
            --platform=managed \
            --tag=${REVISION_TAG} \
            --no-traffic \
            --update-env-vars=DATABASE_ADAPTER=firestore,FIRESTORE_PROJECT_ID=${PROJECT_ID} &
          PID_QUERY=$!
          
          gcloud run deploy client-service \
            --image=${ARTIFACT_REGISTRY}/client-service:${IMAGE_TAG} \
            --region=${REGION} \
            --project=${PROJECT_ID} \
            --platform=managed \
            --tag=${REVISION_TAG} \
            --no-traffic \
            --update-env-vars=DATABASE_ADAPTER=firestore,FIRESTORE_PROJECT_ID=${PROJECT_ID} &
          PID_CLIENT=$!
          
          # 全デプロイの完了を待つ
          echo "⏳ Waiting for all deployments to complete..."
          wait $PID_COMMAND $PID_QUERY $PID_CLIENT
          
          echo "✅ All services deployed successfully"

      # デプロイが完了するまで待機
      - name: Wait for Deployments to Complete
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          REVISION_TAG="sha-${IMAGE_TAG}"
          MAX_WAIT=300  # 5分
          ELAPSED=0
          
          echo "⏳ Waiting for deployments to complete..."
          
          while [ $ELAPSED -lt $MAX_WAIT ]; do
            # 各サービスのリビジョンステータスを確認
            COMMAND_READY=$(gcloud run revisions list --service=command-service --region=${REGION} --project=${PROJECT_ID} --format="value(status.conditions[0].status)" --filter="metadata.name:*${REVISION_TAG}" | head -1)
            QUERY_READY=$(gcloud run revisions list --service=query-service --region=${REGION} --project=${PROJECT_ID} --format="value(status.conditions[0].status)" --filter="metadata.name:*${REVISION_TAG}" | head -1)
            CLIENT_READY=$(gcloud run revisions list --service=client-service --region=${REGION} --project=${PROJECT_ID} --format="value(status.conditions[0].status)" --filter="metadata.name:*${REVISION_TAG}" | head -1)
            
            if [ "$COMMAND_READY" = "True" ] && [ "$QUERY_READY" = "True" ] && [ "$CLIENT_READY" = "True" ]; then
              echo "✅ All deployments are ready"
              break
            else
              echo "Command Service: ${COMMAND_READY:-Not found}, Query Service: ${QUERY_READY:-Not found}, Client Service: ${CLIENT_READY:-Not found}"
              echo "Waiting... (${ELAPSED}s/${MAX_WAIT}s)"
              sleep 10
              ELAPSED=$((ELAPSED + 10))
            fi
          done
          
          if [ $ELAPSED -ge $MAX_WAIT ]; then
            echo "❌ Timeout waiting for deployments"
            exit 1
          fi

      # ヘルスチェック
      - name: Health Check New Versions
        run: |
          echo "🏥 Checking health of new deployments..."
          
          # 各サービスの新しいリビジョンの URL を取得
          SERVICES=("command-service" "query-service" "client-service")
          FAILED_SERVICES=()
          
          for SERVICE in "${SERVICES[@]}"; do
            echo "Checking ${SERVICE}..."
            
            # サービスの URL を取得
            SERVICE_URL=$(gcloud run services describe ${SERVICE} \
              --region=${REGION} \
              --project=${PROJECT_ID} \
              --format="value(status.url)")
            
            # ヘルスチェック（リトライ付き）
            HEALTHY=false
            # 初回の待機（サービス起動待ち - Cloud Run のコールドスタート対応）
            echo "⏳ Initial wait for ${SERVICE} cold start..."
            sleep 30
            
            for i in {1..5}; do
              # ヘルスチェックエンドポイントにアクセス（認証なし）
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${SERVICE_URL}/health" 2>&1 || echo "000")
              
              if [ "$HTTP_CODE" = "200" ]; then
                echo "✅ ${SERVICE} is healthy"
                HEALTHY=true
                break
              else
                echo "⏳ Waiting for ${SERVICE} to be ready (attempt $i/5, HTTP code: $HTTP_CODE)..."
                
                # 最後の試行でない場合は詳細ログを確認
                if [ $i -eq 3 ]; then
                  echo "📋 Checking ${SERVICE} logs for errors..."
                  gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=${SERVICE}" \
                    --limit=20 \
                    --project=${PROJECT_ID} \
                    --format="table(timestamp,jsonPayload.message,textPayload)" | head -30 || true
                fi
                
                if [ $i -lt 5 ]; then
                  sleep 10
                fi
              fi
            done
            
            if [ "$HEALTHY" = false ]; then
              echo "❌ ${SERVICE} health check failed after 5 attempts"
              FAILED_SERVICES+=("${SERVICE}")
            fi
          done
          
          # 失敗したサービスがある場合はエラー
          if [ ${#FAILED_SERVICES[@]} -gt 0 ]; then
            echo "❌ Health check failed for: ${FAILED_SERVICES[*]}"
            exit 1
          fi
          
          echo "✅ All services are healthy"

      # トラフィックの切り替え（並列実行）
      - name: Switch Traffic in Parallel
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          REVISION_TAG="sha-${IMAGE_TAG}"
          
          echo "🔄 Switching traffic to new version..."
          
          # 全サービスのトラフィックを並列で切り替え
          gcloud run services update-traffic command-service \
            --to-tags=${REVISION_TAG}=100 \
            --region=${REGION} \
            --project=${PROJECT_ID} &
          PID_COMMAND=$!
          
          gcloud run services update-traffic query-service \
            --to-tags=${REVISION_TAG}=100 \
            --region=${REGION} \
            --project=${PROJECT_ID} &
          PID_QUERY=$!
          
          gcloud run services update-traffic client-service \
            --to-tags=${REVISION_TAG}=100 \
            --region=${REGION} \
            --project=${PROJECT_ID} &
          PID_CLIENT=$!
          
          # 全てのトラフィック切り替えの完了を待つ
          wait $PID_COMMAND $PID_QUERY $PID_CLIENT
          
          echo "✅ Traffic switched to new version (${REVISION_TAG})"

      # デプロイ結果の通知
      - name: Deployment Summary
        if: always()
        run: |
          echo "🚀 Deployment Summary"
          echo "==================="
          echo "Git SHA: ${GITHUB_SHA}"
          echo "Image Tag: ${GITHUB_SHA::7}"
          echo "Region: ${REGION}"
          echo "Project: ${PROJECT_ID}"
          
          # サービス URL の表示
          echo ""
          echo "Service URLs:"
          gcloud run services list \
            --platform=managed \
            --region=${REGION} \
            --project=${PROJECT_ID} \
            --format="table(SERVICE:label='Service',URL:label='URL')"

