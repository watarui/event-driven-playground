name: CI

# プッシュ時にテストを実行
on:
  push:
    branches:
      - '**'
  pull_request:
    types: [opened, synchronize, reopened]

env:
  MIX_ENV: test
  ELIXIR_VERSION: 1.18.4
  OTP_VERSION: 28.0

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: event_driven_playground_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Install dependencies
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost/event_driven_playground_test
          MIX_ENV: test
        run: |
          # 既存のデータベースを削除（エラーは無視）
          echo "Dropping existing databases..."
          mix ecto.drop -r Shared.Infrastructure.EventStore.Repo || true
          mix ecto.drop -r CommandService.Repo || true
          mix ecto.drop -r QueryService.Repo || true
          
          # 念のため、psql で直接データベースを削除
          echo ""
          echo "Force dropping databases via psql..."
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS event_driven_playground_event_store_test;" || true
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS event_driven_playground_command_test;" || true
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS event_driven_playground_query_test;" || true
          
          # データベースを作成
          echo ""
          echo "Creating databases..."
          mix ecto.create -r Shared.Infrastructure.EventStore.Repo
          mix ecto.create -r CommandService.Repo
          mix ecto.create -r QueryService.Repo
          
          # スキーマを作成（マイグレーション前に実行）
          echo ""
          echo "Creating database schemas..."
          mix db.create_schemas
          
          # 各アプリケーションのマイグレーションを実行
          echo ""
          echo "Running Shared migrations..."
          mix ecto.migrate -r Shared.Infrastructure.EventStore.Repo --log-migrations-sql
          
          echo ""
          echo "Running CommandService migrations..."
          mix ecto.migrate -r CommandService.Repo --log-migrations-sql
          
          echo ""
          echo "Checking QueryService migration status..."
          mix ecto.migrations -r QueryService.Repo
          
          echo ""
          echo "Running QueryService migrations..."
          mix ecto.migrate -r QueryService.Repo --log-migrations-sql

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost/event_driven_playground_test
          MIX_ENV: test
        run: |
          # Run tests with warnings as errors
          mix test --warnings-as-errors --cover
          
          # Generate HTML coverage report for reference (threshold set to 0 in coveralls.json)
          mix coveralls.html || true

      - name: Check formatting
        run: |
          mix format --check-formatted

      - name: Run Credo
        run: |
          mix credo --strict --min-priority high

      - name: Check for security vulnerabilities
        run: |
          mix deps.audit
        continue-on-error: true

      - name: Generate test report
        if: always()
        run: |
          mix test --formatter JUnitFormatter --formatter ExUnit.CLIFormatter
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: _build/test/lib/*/test-results.xml

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: cover/
          if-no-files-found: warn

  coverage:
    name: Aggregate Coverage
    needs: test
    runs-on: ubuntu-latest
    if: success() || failure()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: coverage-reports/
        continue-on-error: true

      - name: Merge coverage reports
        run: |
          # Check if coverage reports exist
          if [ -d "coverage-reports" ] && [ "$(ls -A coverage-reports)" ]; then
            echo "📊 Coverage reports found"
            ls -la coverage-reports/
          else
            echo "⚠️ No coverage reports found"
          fi

      - name: Generate coverage summary
        run: |
          # Generate coverage summary
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "coverage-reports" ] && [ "$(ls -A coverage-reports)" ]; then
            echo "📊 Coverage reports were generated successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Coverage by App:" >> $GITHUB_STEP_SUMMARY
            echo "- Client Service: Coverage data available" >> $GITHUB_STEP_SUMMARY
            echo "- Command Service: Coverage data available" >> $GITHUB_STEP_SUMMARY
            echo "- Query Service: Coverage data available" >> $GITHUB_STEP_SUMMARY
            echo "- Shared: Coverage data available" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No coverage reports were generated" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the test job logs for more information." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Workflow completed!" >> $GITHUB_STEP_SUMMARY

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build all services
        run: |
          # Build base/builder stage first
          docker build \
            --target builder \
            --tag event-driven-playground-builder:test \
            --file build/docker/Dockerfile \
            .
          
          # Client Service
          docker build \
            --target client_service \
            --tag client-service:test \
            --file build/docker/Dockerfile \
            .
          
          # Command Service
          docker build \
            --target command_service \
            --tag command-service:test \
            --file build/docker/Dockerfile \
            .
          
          # Query Service
          docker build \
            --target query_service \
            --tag query-service:test \
            --file build/docker/Dockerfile \
            .

      - name: Test image sizes
        run: |
          echo "📦 Docker image sizes:"
          docker images | grep -E "(client|command|query)-service|event-driven-playground-base" | head -10

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        working-directory: ./frontend
        run: bun install

      - name: Run lint
        working-directory: ./frontend
        run: npm run lint

      - name: Setup frontend CI environment
        working-directory: ./frontend
        run: cp .env.ci.example .env.local

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build